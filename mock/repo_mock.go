// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/KwokBy/easy-ops/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIDemoRepo is a mock of IDemoRepo interface.
type MockIDemoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIDemoRepoMockRecorder
}

// MockIDemoRepoMockRecorder is the mock recorder for MockIDemoRepo.
type MockIDemoRepoMockRecorder struct {
	mock *MockIDemoRepo
}

// NewMockIDemoRepo creates a new mock instance.
func NewMockIDemoRepo(ctrl *gomock.Controller) *MockIDemoRepo {
	mock := &MockIDemoRepo{ctrl: ctrl}
	mock.recorder = &MockIDemoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDemoRepo) EXPECT() *MockIDemoRepoMockRecorder {
	return m.recorder
}

// GetDemos mocks base method.
func (m *MockIDemoRepo) GetDemos(ctx context.Context) ([]models.Demo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemos", ctx)
	ret0, _ := ret[0].([]models.Demo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemos indicates an expected call of GetDemos.
func (mr *MockIDemoRepoMockRecorder) GetDemos(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemos", reflect.TypeOf((*MockIDemoRepo)(nil).GetDemos), ctx)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepo) AddUser(ctx context.Context, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepoMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepo)(nil).AddUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockUserRepo) GetUserByName(ctx context.Context, name string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserRepoMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserRepo)(nil).GetUserByName), ctx, name)
}

// GetUsers mocks base method.
func (m *MockUserRepo) GetUsers(ctx context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepoMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepo)(nil).GetUsers), ctx)
}

// GetUsersByNameAndPwd mocks base method.
func (m *MockUserRepo) GetUsersByNameAndPwd(ctx context.Context, name, pwd string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByNameAndPwd", ctx, name, pwd)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByNameAndPwd indicates an expected call of GetUsersByNameAndPwd.
func (mr *MockUserRepoMockRecorder) GetUsersByNameAndPwd(ctx, name, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByNameAndPwd", reflect.TypeOf((*MockUserRepo)(nil).GetUsersByNameAndPwd), ctx, name, pwd)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(ctx context.Context, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), ctx, user)
}

// MockHostRepo is a mock of HostRepo interface.
type MockHostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHostRepoMockRecorder
}

// MockHostRepoMockRecorder is the mock recorder for MockHostRepo.
type MockHostRepoMockRecorder struct {
	mock *MockHostRepo
}

// NewMockHostRepo creates a new mock instance.
func NewMockHostRepo(ctrl *gomock.Controller) *MockHostRepo {
	mock := &MockHostRepo{ctrl: ctrl}
	mock.recorder = &MockHostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostRepo) EXPECT() *MockHostRepoMockRecorder {
	return m.recorder
}

// AddHost mocks base method.
func (m *MockHostRepo) AddHost(ctx context.Context, host models.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHost", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHost indicates an expected call of AddHost.
func (mr *MockHostRepoMockRecorder) AddHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockHostRepo)(nil).AddHost), ctx, host)
}

// DeleteHost mocks base method.
func (m *MockHostRepo) DeleteHost(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockHostRepoMockRecorder) DeleteHost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockHostRepo)(nil).DeleteHost), ctx, id)
}

// GetHostsByUsername mocks base method.
func (m *MockHostRepo) GetHostsByUsername(ctx context.Context, username string) ([]models.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsByUsername", ctx, username)
	ret0, _ := ret[0].([]models.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsByUsername indicates an expected call of GetHostsByUsername.
func (mr *MockHostRepoMockRecorder) GetHostsByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsByUsername", reflect.TypeOf((*MockHostRepo)(nil).GetHostsByUsername), ctx, username)
}

// UpdateHost mocks base method.
func (m *MockHostRepo) UpdateHost(ctx context.Context, host models.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHost indicates an expected call of UpdateHost.
func (mr *MockHostRepoMockRecorder) UpdateHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHost", reflect.TypeOf((*MockHostRepo)(nil).UpdateHost), ctx, host)
}

// MockMirrorRepo is a mock of MirrorRepo interface.
type MockMirrorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorRepoMockRecorder
}

// MockMirrorRepoMockRecorder is the mock recorder for MockMirrorRepo.
type MockMirrorRepoMockRecorder struct {
	mock *MockMirrorRepo
}

// NewMockMirrorRepo creates a new mock instance.
func NewMockMirrorRepo(ctrl *gomock.Controller) *MockMirrorRepo {
	mock := &MockMirrorRepo{ctrl: ctrl}
	mock.recorder = &MockMirrorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorRepo) EXPECT() *MockMirrorRepoMockRecorder {
	return m.recorder
}

// AddAdmin mocks base method.
func (m *MockMirrorRepo) AddAdmin(ctx context.Context, mirrorId, admin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdmin", ctx, mirrorId, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdmin indicates an expected call of AddAdmin.
func (mr *MockMirrorRepoMockRecorder) AddAdmin(ctx, mirrorId, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmin", reflect.TypeOf((*MockMirrorRepo)(nil).AddAdmin), ctx, mirrorId, admin)
}

// AddMirror mocks base method.
func (m *MockMirrorRepo) AddMirror(ctx context.Context, mirror models.Mirror) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMirror", ctx, mirror)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMirror indicates an expected call of AddMirror.
func (mr *MockMirrorRepoMockRecorder) AddMirror(ctx, mirror interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMirror", reflect.TypeOf((*MockMirrorRepo)(nil).AddMirror), ctx, mirror)
}

// DeleteMirror mocks base method.
func (m *MockMirrorRepo) DeleteMirror(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMirror", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMirror indicates an expected call of DeleteMirror.
func (mr *MockMirrorRepoMockRecorder) DeleteMirror(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMirror", reflect.TypeOf((*MockMirrorRepo)(nil).DeleteMirror), ctx, id)
}

// GetMirrorsByAdmin mocks base method.
func (m *MockMirrorRepo) GetMirrorsByAdmin(ctx context.Context, admin string) ([]models.Mirror, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMirrorsByAdmin", ctx, admin)
	ret0, _ := ret[0].([]models.Mirror)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMirrorsByAdmin indicates an expected call of GetMirrorsByAdmin.
func (mr *MockMirrorRepoMockRecorder) GetMirrorsByAdmin(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMirrorsByAdmin", reflect.TypeOf((*MockMirrorRepo)(nil).GetMirrorsByAdmin), ctx, admin)
}

// MockTaskRepo is a mock of TaskRepo interface.
type MockTaskRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepoMockRecorder
}

// MockTaskRepoMockRecorder is the mock recorder for MockTaskRepo.
type MockTaskRepoMockRecorder struct {
	mock *MockTaskRepo
}

// NewMockTaskRepo creates a new mock instance.
func NewMockTaskRepo(ctrl *gomock.Controller) *MockTaskRepo {
	mock := &MockTaskRepo{ctrl: ctrl}
	mock.recorder = &MockTaskRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepo) EXPECT() *MockTaskRepoMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockTaskRepo) AddTask(ctx context.Context, task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockTaskRepoMockRecorder) AddTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockTaskRepo)(nil).AddTask), ctx, task)
}

// GetTasksByUsername mocks base method.
func (m *MockTaskRepo) GetTasksByUsername(ctx context.Context, username string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUsername", ctx, username)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUsername indicates an expected call of GetTasksByUsername.
func (mr *MockTaskRepoMockRecorder) GetTasksByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUsername", reflect.TypeOf((*MockTaskRepo)(nil).GetTasksByUsername), ctx, username)
}
