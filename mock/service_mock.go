// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/KwokBy/easy-ops/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIDemoService is a mock of IDemoService interface.
type MockIDemoService struct {
	ctrl     *gomock.Controller
	recorder *MockIDemoServiceMockRecorder
}

// MockIDemoServiceMockRecorder is the mock recorder for MockIDemoService.
type MockIDemoServiceMockRecorder struct {
	mock *MockIDemoService
}

// NewMockIDemoService creates a new mock instance.
func NewMockIDemoService(ctrl *gomock.Controller) *MockIDemoService {
	mock := &MockIDemoService{ctrl: ctrl}
	mock.recorder = &MockIDemoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDemoService) EXPECT() *MockIDemoServiceMockRecorder {
	return m.recorder
}

// GetLongDemo mocks base method.
func (m *MockIDemoService) GetLongDemo(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongDemo", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongDemo indicates an expected call of GetLongDemo.
func (mr *MockIDemoServiceMockRecorder) GetLongDemo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongDemo", reflect.TypeOf((*MockIDemoService)(nil).GetLongDemo), ctx)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, username, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, username, password)
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, username, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, username, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, username, password)
}

// MockHostService is a mock of HostService interface.
type MockHostService struct {
	ctrl     *gomock.Controller
	recorder *MockHostServiceMockRecorder
}

// MockHostServiceMockRecorder is the mock recorder for MockHostService.
type MockHostServiceMockRecorder struct {
	mock *MockHostService
}

// NewMockHostService creates a new mock instance.
func NewMockHostService(ctrl *gomock.Controller) *MockHostService {
	mock := &MockHostService{ctrl: ctrl}
	mock.recorder = &MockHostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostService) EXPECT() *MockHostServiceMockRecorder {
	return m.recorder
}

// AddHost mocks base method.
func (m *MockHostService) AddHost(ctx context.Context, host models.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHost", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHost indicates an expected call of AddHost.
func (mr *MockHostServiceMockRecorder) AddHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockHostService)(nil).AddHost), ctx, host)
}

// DeleteHost mocks base method.
func (m *MockHostService) DeleteHost(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockHostServiceMockRecorder) DeleteHost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockHostService)(nil).DeleteHost), ctx, id)
}

// GetHostsByUsername mocks base method.
func (m *MockHostService) GetHostsByUsername(ctx context.Context, username string) ([]models.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsByUsername", ctx, username)
	ret0, _ := ret[0].([]models.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsByUsername indicates an expected call of GetHostsByUsername.
func (mr *MockHostServiceMockRecorder) GetHostsByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsByUsername", reflect.TypeOf((*MockHostService)(nil).GetHostsByUsername), ctx, username)
}

// UpdateHost mocks base method.
func (m *MockHostService) UpdateHost(ctx context.Context, host models.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHost indicates an expected call of UpdateHost.
func (mr *MockHostServiceMockRecorder) UpdateHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHost", reflect.TypeOf((*MockHostService)(nil).UpdateHost), ctx, host)
}

// MockMirrorService is a mock of MirrorService interface.
type MockMirrorService struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorServiceMockRecorder
}

// MockMirrorServiceMockRecorder is the mock recorder for MockMirrorService.
type MockMirrorServiceMockRecorder struct {
	mock *MockMirrorService
}

// NewMockMirrorService creates a new mock instance.
func NewMockMirrorService(ctrl *gomock.Controller) *MockMirrorService {
	mock := &MockMirrorService{ctrl: ctrl}
	mock.recorder = &MockMirrorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorService) EXPECT() *MockMirrorServiceMockRecorder {
	return m.recorder
}

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}
